package groovyfx;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;

public class Downloader {

    //Datafields
    private final int tk;
    private final int ATTEMPS;
    private final int BUFFER_SIZE;
    private final byte[] MAGIC;

    private boolean error;
    private boolean isInterrupted;

    private boolean patch_dlc, patch_demo, blank_id, build_cia;

    private String TitleID, TMD;

    private int content,
                final_content,
                title,
                final_title,
                downloaded_bytes,
                final_bytes,
                failed;

    /**
     * Constructor for class Downloader
     * Initialize all Datafields
     */
    public Downloader(){
        tk = 0x140;
        ATTEMPS = 10;
        BUFFER_SIZE = 4096;
        MAGIC = ConvertingTools.hexStringToByteArray
        error = false;
        isInterrupted = false;
        patch_dlc = true;
        patch_demo = true;
        blank_id = true;
        build_cia = true;
        TitleID = "000000000000000";
        TMD = "-";
        content = 0;
        final_content = 0;
        title = 1;
        final_title = 0;
        downloaded_bytes = 0;
        final_bytes = 0;
        failed = 0;
    }

    /**
     * Set the Parameter to patch DLC Content
     *
     * @param patch         true/false
     */
    public void setPatchDLC(boolean patch){
        patch_dlc = patch;
    }

    /**
     * Set the Parameter to patch Demo Content
     *
     * @param patch         true/false
     */
    public void setPatchDemo(boolean patch){
        patch_demo = patch;
    }

    /**
     * Set the Parameter to remove the Unique Console ID
     *
     * @param blank         true/false
     */
    public void setBlankID(boolean blank){
        blank_id = blank;
    }

    /**
     * Set the Parameter if you want to build the CIAs
     *
     * @param build         true/false
     */
    public void setBuildCIA(boolean build){
        build_cia = build;
    }

    public void getTicketList(){
        /* TODO Add Ticketlistfunction */
    }

    /**
     * Check if Directory exists
     *
     * @param path          Path to Folder
     * @return              true/false
     */
    private boolean createDirectory(String path){
        if(new File(path).mkdirs())
            return true;
        return false;
    }

    /**
     * Creates /Raw and /Cia Directory
     *
     * @param path          Path to Folder
     * @return              true/false
     */
    private boolean createRawCia(String path){
        if(!(Files.exists(Paths.get(path + "/raw")) && Files.exists(Paths.get(path + "/cia")))){
            if(new File(path + "/raw").mkdir() && new File(path + "/cia").mkdir())
                return true;
        }else
            return true;
        return false;
    }

    /**
     * Patches the Ticketdata
     *
     * @param data          Ticketdata
     * @param type          Tickettyp
     * @return              Patched data
     */
    public byte[] patchData(byte[] data, String type){
        if(blank_id){
            data = ConvertingTools.connectByteArray(Arrays.copyOfRange(data, 0x00, tk+0x98), ConvertingTools.hexStringToByteArray("00000000"), Arrays.copyOfRange(data, tk+0x9C, data.length));
            data = ConvertingTools.connectByteArray(Arrays.copyOfRange(data, 0x00, tk+0xDC), ConvertingTools.hexStringToByteArray("00000000"), Arrays.copyOfRange(data, tk+0xE0, data.length));
        }

        if(type == "Demo" && patch_demo){
            data = ConvertingTools.connectByteArray(Arrays.copyOfRange(data, 0x00, tk+0x124), ConvertingTools.hexStringToByteArray("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), Arrays.copyOfRange(data, tk+0x164, data.length));
        }else if(type == "DLC" && patch_dlc){
            data = ConvertingTools.connectByteArray(Arrays.copyOfRange(data, 0x00, tk+0x164), ConvertingTools.hexStringToByteArray("00010014000000ac000000140001001400000000000000280000000100000084000000840003000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"), Arrays.copyOfRange(data, tk+0x210, data.length));
        }

        return data;
    }

    public void prepareDownload(){
        /*
        final_title = downloadList.size()
        createRawCia(path);
        */
    }

}